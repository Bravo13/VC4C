/*
 * Author: doe300
 *
 * See the file "LICENSE" for the full license governing this code.
 */

#ifndef VC4C_PRECOMPILATION_TOOLS_H
#define VC4C_PRECOMPILATION_TOOLS_H

#include <string>

namespace vc4c
{
    struct FrontendTool
    {
        const char* name;
        const char* defaultPath;

        explicit constexpr FrontendTool(const char* name) : name(name), defaultPath(nullptr) {}
        constexpr FrontendTool(const char* name, const char* path) : name(name), defaultPath(path) {}

        constexpr bool hasDefaultPath() const noexcept
        {
            return defaultPath;
        }
    };

#cmakedefine VC4CL_STDLIB_DIR "@VC4CL_STDLIB_DIR@"
#ifdef VC4CL_STDLIB_DIR
    static const std::string VC4CL_STDLIB_FOLDER = VC4CL_STDLIB_DIR;
#undef VC4CL_STDLIB_DIR
#else
    static const std::string VC4CL_STDLIB_FOLDER = "";
#endif

#cmakedefine CMAKE_INSTALL_PREFIX "@CMAKE_INSTALL_PREFIX@"
#ifndef CMAKE_INSTALL_PREFIX
#define CMAKE_INSTALL_PREFIX "/usr/local"
#endif
    static const std::string VC4CL_STDLIB_CACHE_DIR = CMAKE_INSTALL_PREFIX "/share/vc4cc/";
#undef CMAKE_INSTALL_PREFIX

#cmakedefine CLANG_FOUND "@CLANG_FOUND@"
#cmakedefine SPIRV_CLANG_FOUND "@SPIRV_CLANG_FOUND@"
#ifdef SPIRV_CLANG_FOUND
    static constexpr FrontendTool CLANG_TOOL{"clang", SPIRV_CLANG_FOUND};
#undef SPIRV_CLANG_FOUND
#elif defined CLANG_FOUND
    static constexpr FrontendTool CLANG_TOOL{"clang", CLANG_FOUND};
#undef CLANG_FOUND
#endif

#cmakedefine LLVM_LINK_FOUND "@LLVM_LINK_FOUND@"
#ifdef LLVM_LINK_FOUND
    static constexpr FrontendTool LLVM_LINK_TOOL{"llvm-link", LLVM_LINK_FOUND};
#undef LLVM_LINK_FOUND
#else
    static constexpr FrontendTool LLVM_LINK_TOOL{"llvm-link"};
#endif

#cmakedefine LLVM_DIS_FOUND "@LLVM_DIS_FOUND@"
#ifdef LLVM_DIS_FOUND
    static constexpr FrontendTool LLVM_DIS_TOOL{"llvm-dis", LLVM_DIS_FOUND};
#undef LLVM_DIS_FOUND
#else
    static constexpr FrontendTool LLVM_DIS_TOOL{"llvm-dis"};
#endif

#cmakedefine LLVM_AS_FOUND "@LLVM_AS_FOUND@"
#ifdef LLVM_AS_FOUND
    static constexpr FrontendTool LLVM_AS_TOOL{"llvm-as", LLVM_AS_FOUND};
#undef LLVM_AS_FOUND
#else
    static constexpr FrontendTool LLVM_AS_TOOL{"llvm-as"};
#endif

#cmakedefine SPIRV_LINK_MODULES 1

#cmakedefine SPIRV_LLVM_SPIR_FOUND "@SPIRV_LLVM_SPIR_FOUND@"
#ifdef SPIRV_LLVM_SPIR_FOUND
    static constexpr FrontendTool SPIRV_LLVM_SPIRV_TOOL{"llvm-spirv", SPIRV_LLVM_SPIR_FOUND};
#undef SPIRV_LLVM_SPIR_FOUND
#else
    static constexpr FrontendTool SPIRV_LLVM_SPIRV_TOOL{"llvm-spirv"};
#endif

#cmakedefine SPIRV_LINK_FOUND "@SPIRV_LINK_FOUND@"
#ifdef SPIRV_LINK_FOUND
    static constexpr FrontendTool SPIRV_LINK_TOOL{"spirv-link", SPIRV_LINK_FOUND};
#undef SPIRV_LINK_FOUND
#else
    static constexpr FrontendTool SPIRV_LINK_TOOL{"spirv-link"};
#endif

#cmakedefine VC4C_ENABLE_SPIRV_TOOLS_FRONTEND
#ifdef VC4C_ENABLE_SPIRV_TOOLS_FRONTEND
#define SPIRV_TOOLS_FRONTEND
#undef VC4C_ENABLE_SPIRV_TOOLS_FRONTEND
#endif

#cmakedefine VC4C_ENABLE_LLVM_LIB_FRONTEND
#ifdef VC4C_ENABLE_LLVM_LIB_FRONTEND
#define USE_LLVM_LIBRARY
#cmakedefine LLVM_LIBRARY_VERSION @LLVM_LIBRARY_VERSION@
#undef VC4C_ENABLE_LLVM_LIB_FRONTEND
#endif

#cmakedefine VC4C_ENABLE_LIBCLANG
#ifdef VC4C_ENABLE_LIBCLANG
#define USE_CLANG_LIBRARY
#undef VC4C_ENABLE_LIBCLANG
#endif

#cmakedefine LLVM_LIBS_PATH "@LLVM_LIBS_PATH@"
#cmakedefine LLVM_LIB_VERSION "@LLVM_LIB_VERSION@"
#if defined(LLVM_LIBS_PATH) && defined(LLVM_LIB_VERSION)
    static const std::string CLANG_RESOURCE_DIR = LLVM_LIBS_PATH "/clang/" LLVM_LIB_VERSION "/include";
#undef LLVM_LIBS_PATH
#undef LLVM_LIB_VERSION
#else
    static const std::string CLANG_RESOURCE_DIR = "";
#endif

    // The below functions are helpers to turn compile-time macro into run-time condition for unified compilation to
    // also check for syntax-errors in paths not configured

    constexpr bool hasSPIRVToolsFrontend() noexcept
    {
#ifdef SPIRV_TOOLS_FRONTEND
        return true;
#else
        return false;
#endif
    }

    constexpr bool hasLLVMFrontend() noexcept
    {
#ifdef USE_LLVM_LIBRARY
        return true;
#else
        return false;
#endif
    }

    constexpr bool hasClangLibrary() noexcept
    {
#ifdef USE_CLANG_LIBRARY
        return true;
#else
        return false;
#endif
    }

    constexpr bool linkLLVMModulesForSPIRVCompilation() noexcept
    {
#if defined(SPIRV_LINK_MODULES) && SPIRV_LINK_MODULES
        return true;
#else
        return false;
#endif
    }

} // namespace vc4c

#endif /* VC4C_PRECOMPILATION_TOOLS_H */
